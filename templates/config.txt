import { Auth0AdonisConfig } from '@ioc:Adonis/Addons/Zeytech/Auth0Service'
import Env from '@ioc:Adonis/Core/Env'

const config: Auth0AdonisConfig = {
  /* ---------------------
   * Configuration for the auth0 management client
   * ---------------------
   */
  auth0Config: {
    clientId: Env.get('AUTH0_CLIENT_ID'),
    clientSecret: Env.get('AUTH0_CLIENT_SECRET'),
    domain: Env.get('AUTH0_DOMAIN'),
    audience: Env.get('AUTH0_AUDIENCE', ''),
    scope: Env.get('AUTH0_SCOPE', ''),
  },

  /* ---------------------
   * JWT cert for verifying auth0 tokens
   * ---------------------
   */
  // jwtCert: Env.get('AUTH_CERT'),

  /* ---------------------
   * Key for extracting roles list from decoded token data
   * ---------------------
   */
  // tokenRolesKey: '',

  /* ---------------------
   * Cache configuration to use for users and roles to avoid rate limiting from Auth0.
   * NOTE: memory engine should not be used in a production environment that uses
   *       multiple servers or a single server that uses node clustering.
   *       If 'redis' engine is chosen, utilizes Adonis' built in support for Redis.
   * ---------------------
   */
  cache: {
    users: {
      maxSize: 50,
      maxAge: 900, // in seconds
      connectionName: 'cache', // Used only if engine is 'redis'
      engine: 'memory', // Valid values: 'memory' | 'redis'
      healthCheck: {
        enabled: true,
        includeItems: true,
        dateFormat: 'yyyy-LL-dd HH:mm:ss ZZZZ',
      }
    },
    roles: {
      maxSize: 0,
      maxAge: 3600, // in seconds
      connectionName: 'cache', // Used only if engine is 'redis'
      engine: 'memory', // Valid values: 'memory' | 'redis',
      healthCheck: true, // simple value of true uses defaults for includeItems (false) and dateFormat (yyyy-LL-dd HH:mm:ss ZZZZ).
    }
  }
}

export default config
